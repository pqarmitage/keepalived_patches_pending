Still to do:
Specifying peer when setting and removing
Add to SNMP

diff --git a/keepalived/include/vrrp_ipaddress.h b/keepalived/include/vrrp_ipaddress.h
index aa7a0fd5..a02ab927 100644
--- a/keepalived/include/vrrp_ipaddress.h
+++ b/keepalived/include/vrrp_ipaddress.h
@@ -62,6 +62,11 @@ typedef struct _ip_address {
 	uint8_t			flags;			/* Address flags */
 	uint8_t			flagmask;		/* Bitmaps of flags set */
 #endif
+	bool			have_peer;
+	union {
+		struct in_addr sin_addr;
+		struct in6_addr sin6_addr;
+	} peer;
 	bool			set;			/* TRUE if addr is set */
 	bool			iptable_rule_set;	/* TRUE if iptable drop rule
 							 * set to addr */
diff --git a/keepalived/vrrp/vrrp_ipaddress.c b/keepalived/vrrp/vrrp_ipaddress.c
index fe4485d4..0017d186 100644
--- a/keepalived/vrrp/vrrp_ipaddress.c
+++ b/keepalived/vrrp/vrrp_ipaddress.c
@@ -397,20 +397,26 @@ dump_ipaddress(void *if_data)
 {
 	ip_address_t *ipaddr = if_data;
 	char broadcast[INET_ADDRSTRLEN + 5] = "";
+	char peer[INET6_ADDRSTRLEN] = "";
 
 	if (!IP_IS6(ipaddr) && ipaddr->u.sin.sin_brd.s_addr) {
 		snprintf(broadcast, 21, " brd %s",
 			 inet_ntop2(ipaddr->u.sin.sin_brd.s_addr));
 	}
 
-	log_message(LOG_INFO, "     %s/%d%s dev %s scope %s%s%s"
+	if (ipaddr->have_peer)
+		inet_ntop(ipaddr->ifa.ifa_family, &ipaddr->peer, peer, sizeof(peer));
+
+	log_message(LOG_INFO, "     %s/%d%s dev %s scope %s%s%s%s%s"
 			    , ipaddresstos(NULL, ipaddr)
 			    , ipaddr->ifa.ifa_prefixlen
 			    , broadcast
 			    , IF_NAME(ipaddr->ifp)
 			    , get_rttables_scope(ipaddr->ifa.ifa_scope)
 			    , ipaddr->label ? " label " : ""
-			    , ipaddr->label ? ipaddr->label : "");
+			    , ipaddr->label ? ipaddr->label : ""
+			    , ipaddr->have_peer ? " peer " : ""
+			    , peer);
 }
 ip_address_t *
 parse_ipaddress(ip_address_t *ip_address, char *str, int allow_default)
@@ -597,6 +603,22 @@ alloc_ipaddress(list ip_list, vector_t *strvec, interface_t *ifp)
 			new->flags |= IFA_F_MCAUTOJOIN;
 			new->flagmask |= IFA_F_MCAUTOJOIN;
 #endif
+		} else if (!strcmp(str, "peer")) {
+			if (!param_avail) {
+				param_missing = true;
+				break;
+			}
+
+			i++;
+			if (new->have_peer) {
+				log_message(LOG_INFO, "Peer %s - another peer has already been specified", FMT_STR_VSLOT(strvec, i));
+				continue;
+			}
+
+			if (!inet_pton(IP_FAMILY(new), strvec_slot(strvec, i), &new->peer))
+				log_message(LOG_INFO, "Invalid peer address %s", FMT_STR_VSLOT(strvec, i));
+			else
+				new->have_peer = true;
 		} else
 			log_message(LOG_INFO, "Unknown configuration entry '%s' for ip address - ignoring", str);
 		i++;
diff --git a/keepalived/vrrp/vrrp_print.c b/keepalived/vrrp/vrrp_print.c
index 74db5a01..c823aa7b 100644
--- a/keepalived/vrrp/vrrp_print.c
+++ b/keepalived/vrrp/vrrp_print.c
@@ -126,6 +126,7 @@ address_print(FILE *file, void *data)
 	ip_address_t *ipaddr = data;
 	char broadcast[INET_ADDRSTRLEN + 5] = "";	/* allow for " brd " */
 	char addr_str[INET6_ADDRSTRLEN] = "";
+	char peer[INET6_ADDRSTRLEN] = "";
 
 	if (IP_IS6(ipaddr)) {
 		inet_ntop(AF_INET6, &ipaddr->u.sin6_addr, addr_str, sizeof(addr_str));
@@ -136,7 +137,10 @@ address_print(FILE *file, void *data)
 			 inet_ntop2(ipaddr->u.sin.sin_brd.s_addr));
 	}
 
-	fprintf(file, "     %s/%d%s dev %s%s%s%s%s\n"
+	if (ipaddr->have_peer)
+		inet_ntop(ipaddr->ifa.ifa_family, &ipaddr->peer, peer, sizeof(peer));
+
+	fprintf(file, "     %s/%d%s dev %s%s%s%s%s%s%s\n"
 		, addr_str
 		, ipaddr->ifa.ifa_prefixlen
 		, broadcast
@@ -144,7 +148,9 @@ address_print(FILE *file, void *data)
 		, IP_IS4(ipaddr) ? " scope " : ""
 		, IP_IS4(ipaddr) ? get_rttables_scope(ipaddr->ifa.ifa_scope) : ""
 		, ipaddr->label ? " label " : ""
-		, ipaddr->label ? ipaddr->label : "");
+		, ipaddr->label ? ipaddr->label : ""
+		, ipaddr->have_peer ? " peer " : ""
+		, peer);
 }
 
 static void
